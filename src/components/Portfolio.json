[
    {
        "Title": "7Tran",
        "Summary": "An online learning platform developed for a centralized driving school management system.",
        "Image": "7tran.png",
        "Description": "This project is an online learning platform developed for a centralized driving school management system, designed to streamline the delivery and administration of virtual classes. The frontend was built using Angular, providing a responsive and intuitive user interface, while the backend API was developed with ASP.NET, exposing a robust set of RESTful endpoints. Data persistence and management were handled through SQL Server, ensuring high performance and reliability.\n\nThe platform integrated facial recognition technology to verify student identity during online sessions, enhancing both security and compliance. Additionally, it leveraged SignalR to implement real-time WebSocket communication, enabling instant chatbox updates and seamless interaction between students and instructors.\n\nI contributed across the entire technology stack, from designing and implementing frontend components, building and optimizing backend endpoints, to managing and tuning the database schema. Beyond coding, I actively participated in technical architecture discussions, focusing on scalability, application security best practices, and performance optimization to ensure a robust and future-proof solution."
    },
    {
        "Title": "Arbosis",
        "Summary": "A mobile application developed for the Federal Rural University of Rio de Janeiro (UFRRJ), designed to catalog, monitor, and search for urban trees across the city of Rio de Janeiro.",
        "Image": "Arbosis.png",
        "Description": "A mobile web application built for the Federal Rural University of Rio de Janeiro (UFRRJ) to catalog, monitor, and search urban trees across Rio de Janeiro. The frontend was developed with Angular and delivered as a Progressive Web App, which allowed the app to run both online and offline. Core PWA capabilities included a service worker, offline caching of UI and data, and background sync so field entries created without connectivity could be queued and uploaded once a connection was restored.\n\nThe app integrated GPS APIs to capture precise geolocation for each tree in real time. Field users could photograph specimens directly in the app, attach notes, and submit records with coordinates. Because image capture was frequent and network conditions varied, I implemented image loading and delivery optimizations, including client-side resizing and compression at capture time, lazy loading in lists and galleries, and responsive image variants. On the backend, images were stored in AWS S3 with CDN distribution for fast global delivery, proper cache control headers, and content hashing to maximize cache hits.\n\nThe platform exposed a RESTful API built with ASP.NET and persisted data in SQL Server. The API handled authentication, validation, rate limiting, and robust error handling. Database design focused on performance and reliability, with indexes to accelerate common queries such as filtering by species, date range, and distance. Administrative tools supported data review and bulk operations, while the public endpoints powered geosearch and analytics features in the UI.\n\nI worked across the entire stack from Angular components and PWA architecture to API design and database modeling. I also led the project, contributing to technical architecture decisions, security practices, and performance optimization, coordinating the work from discovery through delivery to ensure a stable, scalable, and maintainable solution."
    },
    {
        "Title": "Numeric Calculator",
        "Summary": "A website I developed as a favor for my university, compiling educational content on Numerical Calculus along with interactive simulators for various numerical methods.",
        "Image": "calculadoraNumerica.png",
        "Description": "A simple yet academically rich website I developed to help future students succeed in a university course I personally enjoyed but noticed many struggled with. From a technical standpoint, the site is purely frontend-based, without any backend or external API dependencies. Its value lies in the 100% original academic content I authored myself, in consultation with the course professor, ensuring both accuracy and clarity.\n\nThe site covers the following topics: Taylor polynomials, roots of real-valued functions, initial value problems, linear systems, interpolation, boundary value problems, curve fitting, and numerical integration. Each topic includes interactive simulators fully developed by me, without relying on any third-party libraries or APIs. These simulators not only perform the computations but also provide a step-by-step breakdown of the process in a clear and didactic manner, serving as a hands-on learning tool.\n\nThe university appreciated the project so much that they decided to host it under their official domain: calculadora-numerica.ic.ufrj.br. This recognition leaves a lasting mark of my contribution to the institution—a legacy that will continue to support students for years to come."
    },
    {
        "Title": "IVLP",
        "Summary": "Developed the U.S. government’s premier professional exchange program, bringing together emerging global leaders for short-term exchanges that foster collaboration, strengthen communities, and build lasting connections worldwide.",
        "Image": "IVLP.png",
        "Description":  "A talent acquisition platform developed for the U.S. Embassy to connect and recruit skilled professionals for work opportunities in the United States. I served as the lead developer from project inception to delivery, engaging directly with the client, gathering requirements, and participating in all key technical architecture discussions. My role spanned database modeling, RESTful API design, and the modularization and componentization of the frontend.\n\nThe backend was powered by SQL Server for structured data management and Azure Functions to implement a scalable, serverless RESTful API layer. File uploads from users, such as résumés and supporting documents, were stored securely using AWS S3 Bucket, ensuring high availability and durability.\n\nThe frontend was developed with Angular, incorporating libraries such as ngx-bootstrap, Kendo UI, and Angular Material to deliver a responsive, accessible, and feature-rich user interface. Throughout the project, I focused on performance optimization, scalability, and maintainability, ensuring the platform met both the functional and security requirements of the client."
    },
    {
        "Title": "AI Image Analyser",
        "Summary": "A backend software solution integrating AI APIs to extract information from hundreds of thousands of images, designed for maximum efficiency in both computational performance and cost.",
        "Image": "nodejsAI.png",
        "Description":  "A Node.js software solution developed for the Government of Honduras to process and analyze records containing 20 national ID cards per sheet. The database contained hundreds of thousands of these records, and the program’s main objective was to extract the individual’s name, ID number, and, most importantly, determine whether the card included the person’s signature. This last check was critical, as it automated the government’s validation process for confirming whether individuals had completed a specific national service, which was verified by the presence of their signature on the card.\n\nTo build this system, I researched, tested, and compared multiple AI APIs available on the market, including OpenAI, Claude, and Gemini. Despite this, operational costs were initially extremely high, and even running large-scale tests was challenging. The ID cards were scanned in various offices across the country, and differences in scanner models, paper positioning, or human handling could affect analysis accuracy. Budget constraints made it impossible to perform test runs on the entire dataset in its raw state.\n\nTo address these issues, I developed additional Node.js utilities for image preprocessing, including pixel cleanup, reformatting, resizing, and an intermediate, less expensive OCR pipeline. This approach significantly reduced the volume and cost of AI API calls, cutting operational expenses to a small fraction of the original estimates while maintaining high accuracy for the signature validation process.\n\nThe system was designed with a microservices architecture to improve scalability, fault isolation, and maintainability. Google Cloud Platform was used for hosting and processing tasks, while Docker was leveraged to containerize services, enabling consistent deployments and efficient resource usage. This architecture also allowed for concurrent processing of large batches of ID card sheets, dramatically improving throughput and performance during both testing and production runs."
    },
    {
        "Title": "RPG-site",
        "Summary": "A personal website I developed for playing RPG with friends, also used as a project to improve and refine my development skills.",
        "Image": "RPG.png",
        "Description":  "A personal website I developed for playing RPG sessions online with friends, combining leisure with professional growth. To maximize learning, I built the same platform twice, once using Angular and once using React, allowing me to compare development patterns, component architecture, and performance considerations across the two frameworks.\n\nThe backend consisted of a RESTful API implemented with ASP.NET and Azure Functions, providing a scalable and serverless execution model. I also created additional microservices using Flask to handle auxiliary features and data processing tasks. For storage, the platform leveraged Firebase’s Cloud Firestore for real-time database capabilities, as well as Firebase Authentication for user access control. Static asset hosting and deployment were managed through Firebase Hosting and firebase deploy, ensuring a smooth CI/CD workflow for rapid updates."
    }
]
